from pdf2image import convert_from_path
from PIL import Image
import time
import os
from code_modules.utils import *
from code_modules.auth import *

while True:
    try:
        @bot.message_handler(commands=['start'])
        @check_message
        def welcome_message(message):
            logging.info(f"Start message from user @{message.from_user.username}")
            bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø—Ä–∞–≤–∫–∏:\n\n"
                                              "<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è</b> ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤ –∏ –¥–µ–ª–∞–µ—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
                                              "<b>–ë—É–º–∞–∂–Ω–∞—è</b> ‚Äî –¥–µ–ª–∞–µ—Ç—Å—è –¥–æ–ª–≥–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –Ω–µ–µ —Å—Ç–∞–≤–∏—Ç—Å—è –∂–∏–≤–∞—è –ø–æ–¥–ø–∏—Å—å —Å –ø–µ—á–∞—Ç—å—é "
                                              "(–∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –±—É–º–∞–∂–Ω–∞—è)",
                             parse_mode='HTML', reply_markup=create_response_markup_type())


        def create_response_markup_type():
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", callback_data="Digital"),
                       telebot.types.InlineKeyboardButton("üìÉ –ë—É–º–∞–∂–Ω–∞—è", callback_data="Paper"))
            return markup


        @check_message
        def get_full_name(message, isDigital):
            full_name = message.text
            bot.send_message(message.chat.id,
                             "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ ...¬ª")
            bot.register_next_step_handler(message, get_reason, full_name=full_name, isDigital=isDigital)


        @check_message
        def get_reason(message, full_name, isDigital):
            start_length = len("–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤")
            try:
                if len(message.text) <= start_length:
                    raise Exception("–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞")
                if "\n" in message.text:
                    raise Exception("–≤ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫")
                reason = message.text[0].lower() + message.text[1:]
                if reason[:start_length] != "–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤":
                    raise Exception("–ø—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–æ–≤ ¬´–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ ...¬ª")
                reason = reason.strip(".")

            except Exception as e:
                bot.send_message(message.chat.id, f"–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                bot.register_next_step_handler(message, get_reason, full_name=full_name, isDigital=isDigital)
            else:
                bot.send_message(message.chat.id, "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å, –∫–æ–≥–¥–∞ –±—ã–ª–æ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
                bot.register_next_step_handler(message, get_date, full_name=full_name, reason=reason,
                                               isDigital=isDigital)


        @check_message
        def get_date(message, full_name, reason, isDigital):
            words = "".join(c for c in message.text.replace(".", " ") if
                            c.isalnum() or c == " ").strip().split()  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–æ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ç–æ—á–µ–∫
            year = current_year = int(datetime.date.today().strftime("%Y"))

            try:
                day = int(words[0])
                if day < 1 or day > 31:
                    raise Exception("–î–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–π")

                if words[1].isdigit():
                    month = months[int(words[1]) - 1]
                elif words[1] in months:
                    month = words[1]
                else:
                    raise Exception("–ú–µ—Å—è—Ü —Å—Ç—Ä–∞–Ω–Ω—ã–π")

                if len(words) > 2:
                    year = int(words[2])
                    if year < 100:
                        year += current_year // 100 * 100
                    if abs(year - int(datetime.date.today().strftime("%Y"))) > 2:
                        raise Exception("–ì–æ–¥ —Å—Ç—Ä–∞–Ω–Ω—ã–π")
            except Exception as e:
                bot.send_message(message.chat.id, f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Å –¥–∞—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n<code>{e}</code>",
                                 parse_mode='HTML')
                bot.register_next_step_handler(message, get_date, full_name=full_name, reason=reason,
                                               isDigital=isDigital)
            else:
                date = f"{day} {month} {year} –≥–æ–¥–∞"
                make_request(message, full_name, reason, date, isDigital)


        def make_request(message, full_name, reason, date, isDigital):
            user_username = "@" + message.from_user.username
            user_name = message.from_user.full_name
            user_id = message.chat.id
            info_text = f"üì® –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∫—É –æ—Ç {user_username} ({user_name})"

            if (int(users_manager.get_data()[user_id]["counter"]["digital"]["approved"]) +
                    int(users_manager.get_data()[user_id]["counter"]["paper"]["approved"]) == 0):
                info_text += "\n‚ö†Ô∏è –ï—â–µ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞"

            user_message = f"<b>–¢–∏–ø:</b> {'—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è' if isDigital else '–±—É–º–∞–∂–Ω–∞—è'}\n\n<b>–§–ò–û:</b> {full_name}\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n<b>–î–∞—Ç–∞:</b> {date} "

            id_of_message_in_channel = bot.send_message(CHANNEL_ID, f"{info_text}\n\n{user_message}",
                                                        parse_mode='HTML').message_id
            bot.send_message(ADMIN_CHAT_ID,
                             f"{user_id} {int(time.time())} {id_of_message_in_channel}\n\n"
                             f"{info_text}\n\n{user_message}",
                             parse_mode='HTML', reply_markup=create_response_markup_approval())
            logging.info(
                f"Received {'digital' if isDigital else 'paper'} request from user {user_username}")

            bot.send_message(user_id,
                             f"–°–ø–∞—Å–∏–±–æ! –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å "
                             f"(–ø—Ä–∏–º–µ—Ä–Ω–æ {beautiful_time(count_average_time(isDigital) * 1.5).split('. ')[0].strip('.')}.)")


        def create_response_markup_approval():
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="Approve"),
                       telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="Reject"))
            return markup


        @check_message
        def rejection(message, system_message, request_message):
            if message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å":
                bot.delete_message(chat_id=system_message.chat.id, message_id=system_message.message_id)
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
            elif message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                rejection_reason = ""
            else:
                rejection_reason = message.text

            user_id = int(request_message.text.split('\n')[0].split(' ')[0])
            start_time = int(request_message.text.split('\n')[0].split(' ')[1])
            id_of_message_in_channel = request_message.text.split('\n')[0].split(' ')[2]
            isDigital = True if (request_message.text.split('–¢–∏–ø: '))[1].split('\n')[0] == "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è" else False
            FIO = (request_message.text.split('–§–ò–û: '))[1].split('\n')[0]

            appendix = "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            if rejection_reason:
                appendix += f" ({rejection_reason})"

            bot.edit_message_text(chat_id=request_message.chat.id,
                                  message_id=request_message.message_id,
                                  text=request_message.text + appendix)
            bot.send_message(message.chat.id,
                             "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" + (f" ({rejection_reason})" if rejection_reason else ""),
                             reply_to_message_id=request_message.message_id,
                             reply_markup=telebot.types.ReplyKeyboardRemove())

            bot.send_message(user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è {FIO} –Ω–µ –±—ã–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ "
                             + ("ü§∑‚Äç" if not rejection_reason else f"({rejection_reason})"))
            logging.info(f"Reject request from user @{bot.get_chat(user_id).username}"
                         + (f' with reason "{rejection_reason}"' if rejection_reason else " without reason"))

            count_average_time(isDigital, int(time.time() - start_time))
            users_manager.increment(user_id, "digital" if isDigital else "paper", "rejected")
            bot.edit_message_text(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel,
                                  text=request_message.text.split("\n\n", 1)[1] + appendix)
            bot.delete_message(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel)


        @bot.callback_query_handler(func=lambda call: True)
        def callback(call):
            if call.data == "Digital":
                bot.delete_message(chat_id=call.message.chat.id,
                                   message_id=call.message.message_id)
                bot.send_message(call.message.chat.id,
                                 "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ–µ –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞")
                bot.register_next_step_handler(call.message, get_full_name, isDigital=True)
            elif call.data == "Paper":
                bot.delete_message(chat_id=call.message.chat.id,
                                   message_id=call.message.message_id)
                bot.send_message(call.message.chat.id,
                                 "–•–æ—Ä–æ—à–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ–µ –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞")
                bot.register_next_step_handler(call.message, get_full_name, isDigital=False)

            elif call.data == "Reject":
                reject_menu = telebot.types.ReplyKeyboardMarkup(True, True)
                btn1 = telebot.types.KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å")
                btn2 = telebot.types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                reject_menu.add(btn1, btn2)

                system_message = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
                                                  reply_markup=reject_menu)
                bot.register_next_step_handler(call.message, rejection, system_message, request_message=call.message)

            elif call.data == "Approve":
                user_id = int(call.message.text.split('\n')[0].split(' ')[0])
                user_username = bot.get_chat(user_id).username

                start_time = int(call.message.text.split('\n')[0].split(' ')[1])
                id_of_message_in_channel = call.message.text.split('\n')[0].split(' ')[2]

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")
                bot.send_message(user_id, "–£—Ä–∞, —Å–ø—Ä–∞–≤–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ üéâ")
                logging.info(f"Approve request from user @{user_username}")

                full_name = (call.message.text.split('–§–ò–û: '))[1].split('\n')[0]
                reason = (call.message.text.split('–ü—Ä–∏—á–∏–Ω–∞: '))[1].split('\n')[0]
                date = (call.message.text.split('–î–∞—Ç–∞: '))[1].split('\n')[0]

                isDigital = True if (call.message.text.split('–¢–∏–ø: '))[1].split('\n')[0] == "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è" else False

                create_PDF_certificate(full_name, reason, date, isDigital)

                if isDigital:
                    bot.send_chat_action(user_id, "upload_document")

                    # Convert .pdf to .png
                    pages = convert_from_path(path_to_docs_file + 'edited_file.pdf', 500)
                    pages[0].save(path_to_docs_file + 'edited_file.png', 'PNG')

                    result_filename = full_name + ".pdf"

                    # Convert .png to .pdf
                    img = Image.open(path_to_docs_file + "edited_file.png")
                    img.save(path_to_docs_file + result_filename)

                    # Send modified file to the user
                    with open(path_to_docs_file + result_filename, "rb") as f:
                        bot.send_document(user_id, f)
                        logging.info(f"Send digital file to user @{bot.get_chat(user_id).username}")

                    count_average_time(isDigital, int(time.time() - start_time))
                    users_manager.increment(user_id, "digital", "approved")
                    bot.edit_message_text(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel,
                                          text=call.message.text.split("\n\n", 1)[1] + "\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    bot.delete_message(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel)
                else:
                    bot.send_message(user_id, "–£–∂–µ –ø–µ—á–∞—Ç–∞–µ–º —Å–ø—Ä–∞–≤–∫—É. –°–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ üëå")
                    result_filename = "–ù–ê –ü–ï–ß–ê–¢–¨ - " + full_name + ".pdf"
                    os.rename(path_to_docs_file + "edited_file.pdf", path_to_docs_file + result_filename)
                    with open(path_to_docs_file + result_filename, "rb") as f:
                        bot.send_document(PRINTER_CHAT_ID, f,
                                          caption=call.message.text,
                                          reply_markup=telebot.types.InlineKeyboardMarkup().add(
                                              telebot.types.InlineKeyboardButton("üñ®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ",
                                                                                 callback_data="Printed")))
                        logging.info(f"Send file to printer")

                    bot.edit_message_text(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel,
                                          text=call.message.text.split("\n\n", 1)[
                                                   1] + "\n\nüßë‚Äçüíª –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ")

                # –°lean up after ourselves
                os.remove(path_to_docs_file + result_filename)

            elif call.data == "Printed":
                user_id = int(call.message.caption.split('\n')[0].split(' ')[0])
                start_time = int(call.message.caption.split('\n')[0].split(' ')[1])
                id_of_message_in_channel = call.message.caption.split('\n')[0].split(' ')[2]

                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                         caption=call.message.caption + "\n\nüñ®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ")
                bot.send_message(user_id,
                                 "C–ø—Ä–∞–≤–∫–∞ –¥–ª—è " + (call.message.caption.split('–§–ò–û: '))[1].split('\n')[0]
                                 + " –≥–æ—Ç–æ–≤–∞, –º–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å –≤ " + PLACE)
                logging.info("Send notification to user @" + bot.get_chat(user_id).username)

                count_average_time(False, int(time.time() - start_time))
                users_manager.increment(user_id, "paper", "approved")
                bot.edit_message_text(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel,
                                      text=call.message.caption.split("\n\n", 1)[1] + "\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                bot.delete_message(chat_id=CHANNEL_ID, message_id=id_of_message_in_channel)


        logging.info("Bot running...")
        bot.polling(none_stop=True)

    except Exception as e:
        logging.error(e)
        bot.stop_polling()

        time.sleep(15)

        logging.info("Running again!")

# bot.polling()
