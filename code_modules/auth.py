from functools import wraps
from secret_file import *
from code_modules.filehandling import *


@bot.message_handler(commands=['authorize'])
def authorize(message):
    if message.from_user.id in users_manager.get_data():
        bot.reply_to(message, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        request_phone_number(message)


def request_phone_number(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button_phone = telebot.types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button_phone)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                     reply_markup=keyboard)


@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    if message.contact is not None:
        user_id = message.contact.user_id
        if user_id == message.from_user.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ
            users_manager.add_new_user(user_id, message.from_user.username, message.contact.phone_number)
            bot.send_message(message.chat.id, "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.",
                             reply_markup=telebot.types.ReplyKeyboardRemove())
        else:
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKtrdlTJWVLWbM59-4Qbz5OlSnCDoYFQACjDkAAkmraUr9LAf5qT-zIzME")  # –∏–∑ –ø–∞—Ü–∞–Ω–æ–≤
            bot.reply_to(message, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")


def is_authorized(message):
    return message.from_user.id in users_manager.get_data()


def is_blocked(message):
    return users_manager.get_data()[message.from_user.id]["blocked"]


def is_cancel_command(message):
    return message.text == '/cancel'


def check_message(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = args[0]
        if not is_authorized(message):
            bot.send_message(message.chat.id,
                             "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è ‚Äî /authorize"
                             "\n\n–ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî @mp3_2_voice_bot"
                             )
            return
        if is_blocked(message):
            return
        if is_cancel_command(message):
            logging.info(f"Cancel message from user @{message.from_user.username}")
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=telebot.types.ReplyKeyboardRemove())
            return
        else:
            return func(*args, **kwargs)

    return wrapper


@bot.message_handler(commands=['block'], func=lambda message: message.from_user.id == ADMIN_CHAT_ID)
def block_user(message):
    splitted_text = message.text.split(maxsplit=2)
    if len(splitted_text) == 2:
        user_id = int(splitted_text[1])
        if users_manager.block_user(user_id):
            username = users_manager.get_data()[user_id]["username"]
            logging.info(f"User @{username} was blocked by @{message.from_user.username}")
            bot.send_message(message.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            bot.send_message(message.from_user.id, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∫–∞ –≤ <code>user_id</code>",
                             parse_mode="HTML")
    else:
        bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/block user_id`", parse_mode="MarkdownV2")


@bot.message_handler(commands=['unblock'], func=lambda message: message.from_user.id == ADMIN_CHAT_ID)
def unblock_user(message):
    splitted_text = message.text.split(maxsplit=2)
    if len(splitted_text) == 2:
        user_id = int(splitted_text[1])
        if users_manager.unblock_user(user_id):
            username = users_manager.get_data()[user_id]["username"]
            logging.info(f"User @{username} was unblocked by @{message.from_user.username}")
            bot.send_message(message.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            bot.send_message(message.from_user.id, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∫–∞ –≤ <code>user_id</code>",
                             parse_mode="HTML")
    else:
        bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/unblock user_id`", parse_mode="MarkdownV2")
